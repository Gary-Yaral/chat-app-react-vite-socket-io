{
  "version": 3,
  "sources": ["../parseuri/index.js", "../has-cors/index.js", "../@socket.io/component-emitter/index.js", "../yeast/index.js", "../parseqs/index.js", "../backo2/index.js", "../socket.io-client/build/esm/url.js", "../engine.io-client/build/esm/transports/xmlhttprequest.browser.js", "../engine.io-client/build/esm/globalThis.browser.js", "../engine.io-client/build/esm/util.js", "../engine.io-client/build/esm/transports/polling-xhr.js", "../engine.io-parser/build/esm/commons.js", "../engine.io-parser/build/esm/encodePacket.browser.js", "../@socket.io/base64-arraybuffer/src/index.ts", "../engine.io-parser/build/esm/decodePacket.browser.js", "../engine.io-parser/build/esm/index.js", "../engine.io-client/build/esm/transport.js", "../engine.io-client/build/esm/transports/polling.js", "../engine.io-client/build/esm/transports/websocket.js", "../engine.io-client/build/esm/transports/websocket-constructor.browser.js", "../engine.io-client/build/esm/transports/index.js", "../engine.io-client/build/esm/socket.js", "../engine.io-client/build/esm/index.js", "../socket.io-parser/build/esm/index.js", "../socket.io-parser/build/esm/is-binary.js", "../socket.io-parser/build/esm/binary.js", "../socket.io-client/build/esm/on.js", "../socket.io-client/build/esm/socket.js", "../socket.io-client/build/esm/manager.js", "../socket.io-client/build/esm/index.js", "dep:socket_io-client"],
  "sourcesContent": ["/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\n\nvar re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\nvar parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\n\nmodule.exports = function parseuri(str) {\n    var src = str,\n        b = str.indexOf('['),\n        e = str.indexOf(']');\n\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n\n    var m = re.exec(str || ''),\n        uri = {},\n        i = 14;\n\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n\n    return uri;\n};\n\nfunction pathNames(obj, path) {\n    var regx = /\\/{2,9}/g,\n        names = path.replace(regx, \"/\").split(\"/\");\n\n    if (path.substr(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.substr(path.length - 1, 1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n\n    return names;\n}\n\nfunction queryKey(uri, query) {\n    var data = {};\n\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n\n    return data;\n}\n", "\n/**\n * Module exports.\n *\n * Logic borrowed from Modernizr:\n *\n *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\n */\n\ntry {\n  module.exports = typeof XMLHttpRequest !== 'undefined' &&\n    'withCredentials' in new XMLHttpRequest();\n} catch (err) {\n  // if XMLHttp support is disabled in IE then it will throw\n  // when trying to create\n  module.exports = false;\n}\n", "\n/**\n * Expose `Emitter`.\n */\n\nexports.Emitter = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n", "'use strict';\n\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\n  , length = 64\n  , map = {}\n  , seed = 0\n  , i = 0\n  , prev;\n\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nfunction encode(num) {\n  var encoded = '';\n\n  do {\n    encoded = alphabet[num % length] + encoded;\n    num = Math.floor(num / length);\n  } while (num > 0);\n\n  return encoded;\n}\n\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nfunction decode(str) {\n  var decoded = 0;\n\n  for (i = 0; i < str.length; i++) {\n    decoded = decoded * length + map[str.charAt(i)];\n  }\n\n  return decoded;\n}\n\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nfunction yeast() {\n  var now = encode(+new Date());\n\n  if (now !== prev) return seed = 0, prev = now;\n  return now +'.'+ encode(seed++);\n}\n\n//\n// Map each character to its index.\n//\nfor (; i < length; i++) map[alphabet[i]] = i;\n\n//\n// Expose the `yeast`, `encode` and `decode` functions.\n//\nyeast.encode = encode;\nyeast.decode = decode;\nmodule.exports = yeast;\n", "/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\n\nexports.encode = function (obj) {\n  var str = '';\n\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      if (str.length) str += '&';\n      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n    }\n  }\n\n  return str;\n};\n\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\n\nexports.decode = function(qs){\n  var qry = {};\n  var pairs = qs.split('&');\n  for (var i = 0, l = pairs.length; i < l; i++) {\n    var pair = pairs[i].split('=');\n    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n  }\n  return qry;\n};\n", "\n/**\n * Expose `Backoff`.\n */\n\nmodule.exports = Backoff;\n\n/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction Backoff(opts) {\n  opts = opts || {};\n  this.ms = opts.min || 100;\n  this.max = opts.max || 10000;\n  this.factor = opts.factor || 2;\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n  this.attempts = 0;\n}\n\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\n\nBackoff.prototype.duration = function(){\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var rand =  Math.random();\n    var deviation = Math.floor(rand * this.jitter * ms);\n    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\n  }\n  return Math.min(ms, this.max) | 0;\n};\n\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\n\nBackoff.prototype.reset = function(){\n  this.attempts = 0;\n};\n\n/**\n * Set the minimum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMin = function(min){\n  this.ms = min;\n};\n\n/**\n * Set the maximum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMax = function(max){\n  this.max = max;\n};\n\n/**\n * Set the jitter\n *\n * @api public\n */\n\nBackoff.prototype.setJitter = function(jitter){\n  this.jitter = jitter;\n};\n\n", "import parseuri from \"parseuri\";\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nexport function url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        obj = parseuri(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n", "// browser shim for xmlhttprequest module\nimport hasCORS from \"has-cors\";\nimport globalThis from \"../globalThis.js\";\nexport default function (opts) {\n    const xdomain = opts.xdomain;\n    // XMLHttpRequest can be disabled on IE\n    try {\n        if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n            return new XMLHttpRequest();\n        }\n    }\n    catch (e) { }\n    if (!xdomain) {\n        try {\n            return new globalThis[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n        }\n        catch (e) { }\n    }\n}\n", "export default (() => {\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    else if (typeof window !== \"undefined\") {\n        return window;\n    }\n    else {\n        return Function(\"return this\")();\n    }\n})();\n", "import globalThis from \"./globalThis.js\";\nexport function pick(obj, ...attr) {\n    return attr.reduce((acc, k) => {\n        if (obj.hasOwnProperty(k)) {\n            acc[k] = obj[k];\n        }\n        return acc;\n    }, {});\n}\n// Keep a reference to the real timeout functions so they can be used when overridden\nconst NATIVE_SET_TIMEOUT = setTimeout;\nconst NATIVE_CLEAR_TIMEOUT = clearTimeout;\nexport function installTimerFunctions(obj, opts) {\n    if (opts.useNativeTimers) {\n        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis);\n        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis);\n    }\n    else {\n        obj.setTimeoutFn = setTimeout.bind(globalThis);\n        obj.clearTimeoutFn = clearTimeout.bind(globalThis);\n    }\n}\n", "/* global attachEvent */\nimport XMLHttpRequest from \"./xmlhttprequest.js\";\nimport globalThis from \"../globalThis.js\";\nimport { installTimerFunctions, pick } from \"../util.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { Polling } from \"./polling.js\";\n/**\n * Empty function\n */\nfunction empty() { }\nconst hasXHR2 = (function () {\n    const xhr = new XMLHttpRequest({\n        xdomain: false\n    });\n    return null != xhr.responseType;\n})();\nexport class XHR extends Polling {\n    /**\n     * XHR Polling constructor.\n     *\n     * @param {Object} opts\n     * @api public\n     */\n    constructor(opts) {\n        super(opts);\n        if (typeof location !== \"undefined\") {\n            const isSSL = \"https:\" === location.protocol;\n            let port = location.port;\n            // some user agents have empty `location.port`\n            if (!port) {\n                port = isSSL ? \"443\" : \"80\";\n            }\n            this.xd =\n                (typeof location !== \"undefined\" &&\n                    opts.hostname !== location.hostname) ||\n                    port !== opts.port;\n            this.xs = opts.secure !== isSSL;\n        }\n        /**\n         * XHR supports binary\n         */\n        const forceBase64 = opts && opts.forceBase64;\n        this.supportsBinary = hasXHR2 && !forceBase64;\n    }\n    /**\n     * Creates a request.\n     *\n     * @param {String} method\n     * @api private\n     */\n    request(opts = {}) {\n        Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);\n        return new Request(this.uri(), opts);\n    }\n    /**\n     * Sends data.\n     *\n     * @param {String} data to send.\n     * @param {Function} called upon flush.\n     * @api private\n     */\n    doWrite(data, fn) {\n        const req = this.request({\n            method: \"POST\",\n            data: data\n        });\n        req.on(\"success\", fn);\n        req.on(\"error\", err => {\n            this.onError(\"xhr post error\", err);\n        });\n    }\n    /**\n     * Starts a poll cycle.\n     *\n     * @api private\n     */\n    doPoll() {\n        const req = this.request();\n        req.on(\"data\", this.onData.bind(this));\n        req.on(\"error\", err => {\n            this.onError(\"xhr poll error\", err);\n        });\n        this.pollXhr = req;\n    }\n}\nexport class Request extends Emitter {\n    /**\n     * Request constructor\n     *\n     * @param {Object} options\n     * @api public\n     */\n    constructor(uri, opts) {\n        super();\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.method = opts.method || \"GET\";\n        this.uri = uri;\n        this.async = false !== opts.async;\n        this.data = undefined !== opts.data ? opts.data : null;\n        this.create();\n    }\n    /**\n     * Creates the XHR object and sends the request.\n     *\n     * @api private\n     */\n    create() {\n        const opts = pick(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n        opts.xdomain = !!this.opts.xd;\n        opts.xscheme = !!this.opts.xs;\n        const xhr = (this.xhr = new XMLHttpRequest(opts));\n        try {\n            xhr.open(this.method, this.uri, this.async);\n            try {\n                if (this.opts.extraHeaders) {\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n                    for (let i in this.opts.extraHeaders) {\n                        if (this.opts.extraHeaders.hasOwnProperty(i)) {\n                            xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n                        }\n                    }\n                }\n            }\n            catch (e) { }\n            if (\"POST\" === this.method) {\n                try {\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n                }\n                catch (e) { }\n            }\n            try {\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\n            }\n            catch (e) { }\n            // ie6 check\n            if (\"withCredentials\" in xhr) {\n                xhr.withCredentials = this.opts.withCredentials;\n            }\n            if (this.opts.requestTimeout) {\n                xhr.timeout = this.opts.requestTimeout;\n            }\n            xhr.onreadystatechange = () => {\n                if (4 !== xhr.readyState)\n                    return;\n                if (200 === xhr.status || 1223 === xhr.status) {\n                    this.onLoad();\n                }\n                else {\n                    // make sure the `error` event handler that's user-set\n                    // does not throw in the same tick and gets caught here\n                    this.setTimeoutFn(() => {\n                        this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n                    }, 0);\n                }\n            };\n            xhr.send(this.data);\n        }\n        catch (e) {\n            // Need to defer since .create() is called directly from the constructor\n            // and thus the 'error' event can only be only bound *after* this exception\n            // occurs.  Therefore, also, we cannot throw here at all.\n            this.setTimeoutFn(() => {\n                this.onError(e);\n            }, 0);\n            return;\n        }\n        if (typeof document !== \"undefined\") {\n            this.index = Request.requestsCount++;\n            Request.requests[this.index] = this;\n        }\n    }\n    /**\n     * Called upon successful response.\n     *\n     * @api private\n     */\n    onSuccess() {\n        this.emit(\"success\");\n        this.cleanup();\n    }\n    /**\n     * Called if we have data.\n     *\n     * @api private\n     */\n    onData(data) {\n        this.emit(\"data\", data);\n        this.onSuccess();\n    }\n    /**\n     * Called upon error.\n     *\n     * @api private\n     */\n    onError(err) {\n        this.emit(\"error\", err);\n        this.cleanup(true);\n    }\n    /**\n     * Cleans up house.\n     *\n     * @api private\n     */\n    cleanup(fromError) {\n        if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n            return;\n        }\n        this.xhr.onreadystatechange = empty;\n        if (fromError) {\n            try {\n                this.xhr.abort();\n            }\n            catch (e) { }\n        }\n        if (typeof document !== \"undefined\") {\n            delete Request.requests[this.index];\n        }\n        this.xhr = null;\n    }\n    /**\n     * Called upon load.\n     *\n     * @api private\n     */\n    onLoad() {\n        const data = this.xhr.responseText;\n        if (data !== null) {\n            this.onData(data);\n        }\n    }\n    /**\n     * Aborts the request.\n     *\n     * @api public\n     */\n    abort() {\n        this.cleanup();\n    }\n}\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\nif (typeof document !== \"undefined\") {\n    // @ts-ignore\n    if (typeof attachEvent === \"function\") {\n        // @ts-ignore\n        attachEvent(\"onunload\", unloadHandler);\n    }\n    else if (typeof addEventListener === \"function\") {\n        const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n        addEventListener(terminationEvent, unloadHandler, false);\n    }\n}\nfunction unloadHandler() {\n    for (let i in Request.requests) {\n        if (Request.requests.hasOwnProperty(i)) {\n            Request.requests[i].abort();\n        }\n    }\n}\n", "const PACKET_TYPES = Object.create(null); // no Map = no polyfill\nPACKET_TYPES[\"open\"] = \"0\";\nPACKET_TYPES[\"close\"] = \"1\";\nPACKET_TYPES[\"ping\"] = \"2\";\nPACKET_TYPES[\"pong\"] = \"3\";\nPACKET_TYPES[\"message\"] = \"4\";\nPACKET_TYPES[\"upgrade\"] = \"5\";\nPACKET_TYPES[\"noop\"] = \"6\";\nconst PACKET_TYPES_REVERSE = Object.create(null);\nObject.keys(PACKET_TYPES).forEach(key => {\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n});\nconst ERROR_PACKET = { type: \"error\", data: \"parser error\" };\nexport { PACKET_TYPES, PACKET_TYPES_REVERSE, ERROR_PACKET };\n", "import { PACKET_TYPES } from \"./commons.js\";\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = obj => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + content);\n    };\n    return fileReader.readAsDataURL(data);\n};\nexport default encodePacket;\n", null, "import { ERROR_PACKET, PACKET_TYPES_REVERSE } from \"./commons.js\";\nimport { decode } from \"@socket.io/base64-arraybuffer\";\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType)\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        return {\n            type: \"message\",\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n        };\n    }\n    const packetType = PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n        return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1)\n        }\n        : {\n            type: PACKET_TYPES_REVERSE[type]\n        };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n        const decoded = decode(data);\n        return mapBinary(decoded, binaryType);\n    }\n    else {\n        return { base64: true, data }; // fallback for old browsers\n    }\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"blob\":\n            return data instanceof ArrayBuffer ? new Blob([data]) : data;\n        case \"arraybuffer\":\n        default:\n            return data; // assuming the data is already an ArrayBuffer\n    }\n};\nexport default decodePacket;\n", "import encodePacket from \"./encodePacket.js\";\nimport decodePacket from \"./decodePacket.js\";\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        encodePacket(packet, false, encodedPacket => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexport const protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload };\n", "import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nexport class Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} options.\n     * @api private\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.readyState = \"\";\n        this.socket = opts.socket;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} str\n     * @return {Transport} for chaining\n     * @api protected\n     */\n    onError(msg, desc) {\n        const err = new Error(msg);\n        // @ts-ignore\n        err.type = \"TransportError\";\n        // @ts-ignore\n        err.description = desc;\n        super.emit(\"error\", err);\n        return this;\n    }\n    /**\n     * Opens the transport.\n     *\n     * @api public\n     */\n    open() {\n        if (\"closed\" === this.readyState || \"\" === this.readyState) {\n            this.readyState = \"opening\";\n            this.doOpen();\n        }\n        return this;\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api public\n     */\n    close() {\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     * @api public\n     */\n    send(packets) {\n        if (\"open\" === this.readyState) {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @api protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emit(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @api protected\n     */\n    onData(data) {\n        const packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @api protected\n     */\n    onPacket(packet) {\n        super.emit(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @api protected\n     */\n    onClose() {\n        this.readyState = \"closed\";\n        super.emit(\"close\");\n    }\n}\n", "import { Transport } from \"../transport.js\";\nimport yeast from \"yeast\";\nimport parseqs from \"parseqs\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport class Polling extends Transport {\n    constructor() {\n        super(...arguments);\n        this.polling = false;\n    }\n    /**\n     * Transport name.\n     */\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n    doOpen() {\n        this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this.polling || !this.writable) {\n            let total = 0;\n            if (this.polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n    poll() {\n        this.polling = true;\n        this.doPoll();\n        this.emit(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n    onData(data) {\n        const callback = packet => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose();\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this.polling = false;\n            this.emit(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this.poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, data => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emit(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        let port = \"\";\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"https\" === schema && Number(this.opts.port) !== 443) ||\n                (\"http\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        const encodedQuery = parseqs.encode(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n}\n", "import { Transport } from \"../transport.js\";\nimport parseqs from \"parseqs\";\nimport yeast from \"yeast\";\nimport { pick } from \"../util.js\";\nimport { defaultBinaryType, nextTick, usingBrowserWebSocket, WebSocket } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class WS extends Transport {\n    /**\n     * WebSocket transport constructor.\n     *\n     * @api {Object} connection options\n     * @api public\n     */\n    constructor(opts) {\n        super(opts);\n        this.supportsBinary = !opts.forceBase64;\n    }\n    /**\n     * Transport name.\n     *\n     * @api public\n     */\n    get name() {\n        return \"websocket\";\n    }\n    /**\n     * Opens socket.\n     *\n     * @api private\n     */\n    doOpen() {\n        if (!this.check()) {\n            // let probe timeout\n            return;\n        }\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws =\n                usingBrowserWebSocket && !isReactNative\n                    ? protocols\n                        ? new WebSocket(uri, protocols)\n                        : new WebSocket(uri)\n                    : new WebSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emit(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @api private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = this.onClose.bind(this);\n        this.ws.onmessage = ev => this.onData(ev.data);\n        this.ws.onerror = e => this.onError(\"websocket error\", e);\n    }\n    /**\n     * Writes data to socket.\n     *\n     * @param {Array} array of packets.\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, data => {\n                // always create a new object (GH-437)\n                const opts = {};\n                if (!usingBrowserWebSocket) {\n                    if (packet.options) {\n                        opts.compress = packet.options.compress;\n                    }\n                    if (this.opts.perMessageDeflate) {\n                        const len = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                        if (len < this.opts.perMessageDeflate.threshold) {\n                            opts.compress = false;\n                        }\n                    }\n                }\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    if (usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        this.ws.send(data);\n                    }\n                    else {\n                        this.ws.send(data, opts);\n                    }\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emit(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    /**\n     * Closes socket.\n     *\n     * @api private\n     */\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        let port = \"\";\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\n                (\"ws\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        const encodedQuery = parseqs.encode(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @api public\n     */\n    check() {\n        return (!!WebSocket &&\n            !(\"__initialize\" in WebSocket && this.name === WS.prototype.name));\n    }\n}\n", "import globalThis from \"../globalThis.js\";\nexport const nextTick = (() => {\n    const isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n    if (isPromiseAvailable) {\n        return cb => Promise.resolve().then(cb);\n    }\n    else {\n        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);\n    }\n})();\nexport const WebSocket = globalThis.WebSocket || globalThis.MozWebSocket;\nexport const usingBrowserWebSocket = true;\nexport const defaultBinaryType = \"arraybuffer\";\n", "import { XHR } from \"./polling-xhr.js\";\nimport { WS } from \"./websocket.js\";\nexport const transports = {\n    websocket: WS,\n    polling: XHR\n};\n", "import { transports } from \"./transports/index.js\";\nimport { installTimerFunctions } from \"./util.js\";\nimport parseqs from \"parseqs\";\nimport parseuri from \"parseuri\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nexport class Socket extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri or options\n     * @param {Object} opts - options\n     * @api public\n     */\n    constructor(uri, opts = {}) {\n        super();\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = parseuri(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parseuri(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\"polling\", \"websocket\"];\n        this.readyState = \"\";\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024\n            },\n            transportOptions: {},\n            closeOnBeforeunload: true\n        }, opts);\n        this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = parseqs.decode(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                addEventListener(\"beforeunload\", () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                }, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\");\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} transport name\n     * @return {Transport}\n     * @api private\n     */\n    createTransport(name) {\n        const query = clone(this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port\n        });\n        return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", () => {\n            this.onClose(\"transport close\");\n        });\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n    probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", msg => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = err => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState &&\n            this.opts.upgrade &&\n            this.transport.pause) {\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.resetPingTimeout();\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            this.transport.send(this.writeBuffer);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = this.writeBuffer.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n    onError(err) {\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n    onClose(reason, desc) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, desc);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nSocket.protocol = protocol;\nfunction clone(obj) {\n    const o = {};\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            o[i] = obj[i];\n        }\n    }\n    return o;\n}\n", "import { Socket } from \"./socket.js\";\nexport { Socket };\nexport const protocol = Socket.protocol;\nexport { Transport } from \"./transport.js\";\nexport { transports } from \"./transports/index.js\";\nexport { installTimerFunctions } from \"./util.js\";\n", "import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                obj.type =\n                    obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK;\n                return this.encodeAsBinary(obj);\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    constructor() {\n        super();\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            packet = this.decodeString(obj);\n            if (packet.type === PacketType.BINARY_EVENT ||\n                packet.type === PacketType.BINARY_ACK) {\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return typeof payload === \"object\";\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || typeof payload === \"object\";\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return Array.isArray(payload) && payload.length > 0;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n        }\n    }\n}\nfunction tryParse(str) {\n    try {\n        return JSON.parse(str);\n    }\n    catch (e) {\n        return false;\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n", "const withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj.buffer instanceof ArrayBuffer;\n};\nconst toString = Object.prototype.toString;\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeFile = typeof File === \"function\" ||\n    (typeof File !== \"undefined\" &&\n        toString.call(File) === \"[object FileConstructor]\");\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nexport function isBinary(obj) {\n    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||\n        (withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File));\n}\nexport function hasBinary(obj, toJSON) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0, l = obj.length; i < l; i++) {\n            if (hasBinary(obj[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (isBinary(obj)) {\n        return true;\n    }\n    if (obj.toJSON &&\n        typeof obj.toJSON === \"function\" &&\n        arguments.length === 1) {\n        return hasBinary(obj.toJSON(), true);\n    }\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n            return true;\n        }\n    }\n    return false;\n}\n", "import { isBinary } from \"./is-binary.js\";\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nexport function deconstructPacket(packet) {\n    const buffers = [];\n    const packetData = packet.data;\n    const pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return { packet: pack, buffers: buffers };\n}\nfunction _deconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (isBinary(data)) {\n        const placeholder = { _placeholder: true, num: buffers.length };\n        buffers.push(data);\n        return placeholder;\n    }\n    else if (Array.isArray(data)) {\n        const newData = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            newData[i] = _deconstructPacket(data[i], buffers);\n        }\n        return newData;\n    }\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\n        const newData = {};\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                newData[key] = _deconstructPacket(data[key], buffers);\n            }\n        }\n        return newData;\n    }\n    return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nexport function reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    packet.attachments = undefined; // no longer useful\n    return packet;\n}\nfunction _reconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (data && data._placeholder) {\n        return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n    }\n    else if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = _reconstructPacket(data[i], buffers);\n        }\n    }\n    else if (typeof data === \"object\") {\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n            }\n        }\n    }\n    return data;\n}\n", "export function on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n", "import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.connected = false;\n        this.disconnected = true;\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n    onclose(reason) {\n        this.connected = false;\n        this.disconnected = true;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n                this.onack(packet);\n                break;\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        this.id = id;\n        this.connected = true;\n        this.disconnected = false;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => this.packet(packet));\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n}\n", "import { Socket as Engine, installTimerFunctions, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport Backoff from \"backo2\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        // emit `error`\n        const errorSub = on(socket, \"error\", (err) => {\n            self.cleanup();\n            self._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                self.maybeReconnectOnOpen();\n            }\n        });\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            if (timeout === 0) {\n                openSubDestroy(); // prevents a race condition with the 'open' event\n            }\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                socket.close();\n                // @ts-ignore\n                socket.emit(\"error\", new Error(\"timeout\"));\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        this.decoder.add(data);\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        this.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason) {\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n", "import { url } from \"./url.js\";\nimport { Manager } from \"./manager.js\";\nimport { Socket } from \"./socket.js\";\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = url(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        io = new Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            cache[id] = new Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n    Manager,\n    Socket,\n    io: lookup,\n    connect: lookup,\n});\n/**\n * Protocol version.\n *\n * @public\n */\nexport { protocol } from \"socket.io-parser\";\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default, };\n", "import d from \"./node_modules/socket.io-client/build/esm/index.js\";export default d;\nexport * from \"./node_modules/socket.io-client/build/esm/index.js\""],
  "mappings": "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",
  "names": []
}
